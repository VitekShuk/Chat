{"version":3,"sources":["enums/pages.enum.ts","config/config.ts","styles/styles.tsx","common/common.ts","ui/button-base.tsx","signup/signup.tsx","signin/signin.tsx","ui/message-box.tsx","chat/chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PagesEnum","url","signStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","chatStyles","minWidth","buttonOut","position","messageInfo","color","messageBox","overflowX","overflowY","message","marginBottom","marginLeft","marginRight","maxWidth","wordWrap","userLogin","fontSize","request","uri","login","setPage","method","fetch","then","response","json","access_token","Cookies","set","CHAT","ButtonBase","buttonText","handleClick","classes","Button","fullWidth","variant","className","onClick","SignUp","useState","setLogin","password","setPassword","repeatPassword","setRepeatPassword","handleChange","event","target","value","name","Container","component","CssBaseline","Avatar","Typography","noValidate","Grid","container","item","xs","TextField","required","id","label","autoComplete","onChange","type","justify","Link","SIGNIN","style","cursor","SignIn","SIGNUP","MessageBox","text","createdAt","date","format","parseISO","locale","ru","Box","socket","socketIOClient","disconnect","Chat","massage","setMessage","messagesList","setMessagesList","get","connect","useEffect","emit","JSON","stringify","command","data","on","size","height","border","borderRadius","borderColor","padding","map","key","multiline","App","page","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6cab009e.chunk.js","sourcesContent":["export enum PagesEnum {\n  SIGNIN = \"SIGNIN\",\n  SIGNUP = \"SIGNUP\",\n  CHAT = \"CHAT\",\n}","export const url: string = \"http://localhost:80/\"\nexport const signin: string = \"signin\"\nexport const signup: string = \"signup\"\n","import { makeStyles } from \"@material-ui/core\"\n\nexport const signStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport const chatStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    minWidth: \"288px\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  buttonOut: {\n    position: \"absolute\",\n  },\n  messageInfo: {\n    color: \"rgba(0, 0, 0, 0.5)\",\n  },\n  messageBox: {\n    overflowX: \"hidden\",\n    overflowY: \"auto\",\n  },\n  message: {\n    marginBottom: \"14px\",\n    marginLeft: \"10px\",\n    marginRight: \"10px\",\n    maxWidth: \"458px\",\n    wordWrap: \"break-word\",\n  },\n  userLogin: {\n    marginLeft: \"auto\",\n    marginRight: 0,\n    fontSize: 16,\n  },\n}));","import Cookies from \"js-cookie\"\nimport { PagesEnum } from \"../enums/pages.enum\"\nimport { requestProps } from \"../types/api\"\n\nexport const request = ({uri, login, setPage, method}: requestProps): void => {\n  fetch(uri, {\n    method: method || \"POST\",\n  })\n    .then(response => response.json())\n    .then(json => {\n      json.access_token && Cookies.set(\"token\", json.access_token)\n      json.access_token && setPage(PagesEnum.CHAT)\n      Cookies.set(\"userLogin\", login)\n    })\n}","\nimport React, { ReactElement } from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport { signStyles } from \"../styles/styles\"\nimport { buttonProps } from \"../types/api\"\n\nexport const ButtonBase = ({buttonText, handleClick}: buttonProps): ReactElement => {\n  const classes = signStyles()\n\n  return (\n    <Button\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      className={classes.submit}\n      onClick={handleClick}\n    >\n      {buttonText}\n    </Button>\n  )\n}","import React, { useState, ReactElement } from \"react\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\n\r\nimport Container from \"@material-ui/core/Container\"\r\nimport Link from \"@material-ui/core/Link\"\r\nimport { PagesEnum } from \"../enums/pages.enum\"\r\nimport { url, signup } from \"../config/config\"\r\nimport { signStyles } from \"../styles/styles\"\r\nimport { pageProps } from \"../types/api\"\r\nimport { request } from \"../common/common\"\r\nimport { ButtonBase } from \"../ui/button-base\"\r\n\r\nexport const SignUp = ({setPage}: pageProps): ReactElement => {\r\n  const classes = signStyles()\r\n  const [login, setLogin] = useState<string>(\"\")\r\n  const [password, setPassword] = useState<string>(\"\")\r\n  const [repeatPassword, setRepeatPassword] = useState<string>(\"\")\r\n  const uri = `${url}${signup}?login=${login}&password=${password}`\r\n\r\n  const signUpRequest = (): void => {\r\n    request({uri, login, setPage})\r\n  }\r\n\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value, name } = event.target\r\n    name === \"login\" && setLogin(value)\r\n    name === \"password\" && setPassword(value)\r\n    name === \"repeat password\" && setRepeatPassword(value)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {\"Sign up\"}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"username\"\r\n                value={login}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"new-password\"\r\n                value={password}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"repeat password\"\r\n                label=\"Repeat password\"\r\n                type=\"password\"\r\n                id=\"repeat password\"\r\n                autoComplete=\"new-password\"\r\n                value={repeatPassword}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <ButtonBase \r\n            buttonText={\"Sign Up\"}\r\n            handleClick={signUpRequest}\r\n          />\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link \r\n                variant=\"body2\" \r\n                onClick={(): void => setPage(PagesEnum.SIGNIN)} \r\n                style={{cursor: \"pointer\"}}\r\n              >\r\n                {\"Already have an account? Sign in\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React, { useState, ReactElement } from \"react\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport Link from \"@material-ui/core/Link\"\r\nimport { PagesEnum } from \"../enums/pages.enum\"\r\nimport { url, signin } from \"../config/config\"\r\nimport { signStyles } from \"../styles/styles\"\r\nimport { pageProps } from \"../types/api\"\r\nimport { request } from \"../common/common\"\r\nimport { ButtonBase } from \"../ui/button-base\"\r\n\r\nexport const SignIn = ({setPage}: pageProps): ReactElement => {\r\n  const classes = signStyles();\r\n  const [login, setLogin] = useState<string>(\"\")\r\n  const [password, setPassword] = useState<string>(\"\")\r\n  const uri = `${url}${signin}?login=${login}&password=${password}`\r\n\r\n  const signInRequest = (): void => {\r\n    request({uri, login, setPage})\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value, name } = event.target\r\n    name === \"login\" && setLogin(value)\r\n    name === \"password\" && setPassword(value)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {\"Sign in\"}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"login\"\r\n                value={login}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <ButtonBase \r\n            buttonText={\"Sign In\"}\r\n            handleClick={signInRequest}\r\n          />\r\n          <Grid item>\r\n              <Link\r\n                variant=\"body2\" \r\n                onClick={(): void => setPage(PagesEnum.SIGNUP)} \r\n                style={{cursor: \"pointer\"}}\r\n              >\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","\nimport React, { ReactElement } from \"react\"\nimport { format } from \"date-fns\"\nimport ru from \"date-fns/locale/ru\"\nimport parseISO from \"date-fns/parseISO\"\nimport { Box } from \"@material-ui/core\"\nimport { chatStyles } from \"../styles/styles\"\nimport { messageProps } from \"../types/api\"\n\nexport const MessageBox = ({login, text, createdAt}: messageProps): ReactElement => {\n  const classes = chatStyles();\n  const date = format(parseISO(createdAt), \"Pp\", {\n    locale: ru,\n  })\n\n  return (\n    <>\n      <Box className={classes.messageInfo}>\n        {`${date}, ${login}: `}\n      </Box>\n      <Box className={classes.message}>\n        {text}\n      </Box>\n    </>\n  )\n}","import React, { useEffect, useState, ReactElement } from \"react\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport socketIOClient from \"socket.io-client\"\r\n\r\nimport ChatIcon from \"@material-ui/icons/Chat\"\r\nimport Cookies from \"js-cookie\"\r\nimport { PagesEnum } from \"../enums/pages.enum\"\r\nimport { Box } from \"@material-ui/core\"\r\nimport { url } from \"../config/config\"\r\nimport { chatStyles } from \"../styles/styles\"\r\nimport { pageProps, messageProps } from \"../types/api\"\r\nimport { ButtonBase } from \"../ui/button-base\"\r\nimport { MessageBox } from \"../ui/message-box\"\r\n\r\nconst socket = socketIOClient(url);\r\nsocket.disconnect()\r\n\r\nexport const Chat = ({setPage}: pageProps): ReactElement => {\r\n  const classes = chatStyles();\r\n  const [massage, setMessage] = useState<string>(\"\")\r\n  const [messagesList, setMessagesList] = useState<messageProps[]>([])\r\n  const userLogin = Cookies.get(\"userLogin\")\r\n\r\n  socket.connect()\r\n\r\n  const handleOut = (): void => {\r\n    Cookies.set(\"token\", \"\")\r\n    Cookies.set(\"userLogin\", \"\")\r\n    setPage(PagesEnum.SIGNIN)\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value, name } = event.target\r\n    name === \"message\" && setMessage(value)\r\n  }\r\n\r\n  const sendMessage = (): void => {\r\n    socket.emit(\"events\", JSON.stringify({ \r\n      command: \"createMessage\", \r\n      data: {\r\n        text: massage,\r\n      }\r\n    }))\r\n    setMessage(\"\")\r\n  }\r\n\r\n  useEffect((): (() => void) => {\r\n    socket.emit(\"messages\", \r\n      JSON.stringify({ command: \"getAllMessages\" }), \r\n      (data: any) => {\r\n        setMessagesList(data)\r\n      }\r\n    );\r\n    socket.on(\"messages\", (data: any) => {\r\n      setMessagesList(data)\r\n    })\r\n\r\n    return (): void => {socket.disconnect()};\r\n  }, []);\r\n  \r\n  return (\r\n    <Container\r\n      component=\"main\" \r\n      maxWidth=\"sm\"\r\n    >\r\n      <Button \r\n        variant=\"outlined\" \r\n        size=\"small\"\r\n        className={classes.buttonOut}\r\n        onClick={handleOut}\r\n        >\r\n          {\"Out\"}\r\n      </Button>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Box className={classes.userLogin}>\r\n          {userLogin}\r\n        </Box>\r\n        <Avatar className={classes.avatar}>\r\n          <ChatIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {\"Bla-bla-chat\"}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Box\r\n                height=\"500px\"\r\n                component=\"div\" \r\n                border=\"1px solid\"\r\n                borderRadius=\"4px\"\r\n                borderColor=\"rgba(0, 0, 0, 0.23)\"\r\n                padding=\"10px\"\r\n                className={classes.messageBox}\r\n              >\r\n                {messagesList.map((item: any): ReactElement => \r\n                  <MessageBox \r\n                    key={item.id} \r\n                    login={item.login} \r\n                    text={item.text} \r\n                    createdAt={item.createdAt} \r\n                  />)}\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"message\"\r\n                label=\"Message\"\r\n                type=\"message\"\r\n                id=\"message\"\r\n                multiline\r\n                value={massage}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <ButtonBase \r\n            buttonText={\"Send\"}\r\n            handleClick={sendMessage}\r\n          />\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\"\nimport { SignUp } from \"./signup/signup\"\nimport { SignIn } from \"./signin/signin\"\nimport { Chat } from \"./chat/chat\"\nimport Cookies from \"js-cookie\"\nimport { PagesEnum } from \"./enums/pages.enum\"\n\nfunction App() {\n  const [page, setPage] = useState<string>(PagesEnum.SIGNIN)\n  \n  useEffect((): void => {\n    const token = Cookies.get(\"token\")\n    token && setPage(PagesEnum.CHAT)\n  }, [])\n\n  return (\n    <>\n      {page === PagesEnum.SIGNUP && <SignUp setPage={setPage} />}\n      {page === PagesEnum.SIGNIN && <SignIn setPage={setPage} />}\n      {page === PagesEnum.CHAT && <Chat setPage={setPage} />}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}