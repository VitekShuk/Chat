{"version":3,"sources":["enums/pages.enum.ts","config/index.ts","styles/styles.tsx","signup/signup.tsx","signin/signin.tsx","chat/chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PagesEnum","url","signStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","chatStyles","minWidth","buttonOut","position","messageInfo","color","messageBox","overflowX","overflowY","message","marginBottom","marginLeft","marginRight","maxWidth","wordWrap","userLogin","fontSize","SignUp","setPage","classes","useState","login","setLogin","password","setPassword","repeatPassword","setRepeatPassword","handleChange","event","target","value","name","Container","component","CssBaseline","className","Avatar","Typography","variant","noValidate","Grid","container","item","xs","TextField","required","fullWidth","id","label","autoComplete","onChange","type","Button","onClick","uri","fetch","method","then","response","json","access_token","Cookies","set","CHAT","justify","Link","SIGNIN","style","cursor","SignIn","SIGNUP","socket","socketIOClient","Chat","connect","massage","setMessage","messagesList","setMessagesList","get","useEffect","emit","JSON","stringify","command","data","on","disconnect","MessageBox","text","createdAt","date","format","parseISO","locale","ru","Box","size","height","border","borderRadius","borderColor","padding","map","key","multiline","App","page","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.16da2566.chunk.js","sourcesContent":["export enum PagesEnum {\n  SIGNIN = \"SIGNIN\",\n  SIGNUP = \"SIGNUP\",\n  CHAT = \"CHAT\",\n}","export const url = \"http://localhost:80/\"","import { makeStyles } from '@material-ui/core';\n\nexport const signStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport const chatStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    minWidth: \"288px\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  buttonOut: {\n    position: 'absolute',\n  },\n  messageInfo: {\n    color: \"rgba(0, 0, 0, 0.5)\",\n  },\n  messageBox: {\n    overflowX: \"hidden\",\n    overflowY: \"auto\",\n  },\n  message: {\n    marginBottom: \"14px\",\n    marginLeft: \"10px\",\n    marginRight: \"10px\",\n    maxWidth: \"458px\",\n    wordWrap: \"break-word\",\n  },\n  userLogin: {\n    marginLeft: \"auto\",\n    marginRight: 0,\n    fontSize: 16,\n  },\n}));","import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Button from '@material-ui/core/Button'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Cookies from 'js-cookie'\r\n\r\nimport Container from '@material-ui/core/Container'\r\nimport Link from '@material-ui/core/Link'\r\nimport { PagesEnum } from '../enums/pages.enum'\r\nimport { url } from '../config/index'\r\nimport { signStyles } from '../styles/styles'\r\nimport { pageProps } from '../types/api'\r\n\r\nexport default function SignUp({setPage}: pageProps) {\r\n  const classes = signStyles()\r\n  const [login, setLogin] = useState<string>(\"\")\r\n  const [password, setPassword] = useState<string>(\"\")\r\n  const [repeatPassword, setRepeatPassword] = useState<string>(\"\")\r\n\r\n  const signUpRequest = (): void => {\r\n    if (password === repeatPassword) {\r\n      const uri = `${url}signup?login=${login}&password=${password}`\r\n      fetch(uri, {\r\n        method: 'POST',\r\n      })\r\n        .then(response => response.json())\r\n        .then(json => { \r\n          json.access_token && Cookies.set(\"token\", json.access_token)\r\n          json.access_token && setPage(PagesEnum.CHAT)\r\n          Cookies.set(\"userLogin\", login)\r\n        });\r\n      }\r\n  } \r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value, name } = event.target\r\n    name === \"login\" && setLogin(value)\r\n    name === \"password\" && setPassword(value)\r\n    name === \"repeat password\" && setRepeatPassword(value)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {\"Sign up\"}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"username\"\r\n                value={login}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"new-password\"\r\n                value={password}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"repeat password\"\r\n                label=\"Repeat password\"\r\n                type=\"password\"\r\n                id=\"repeat password\"\r\n                autoComplete=\"new-password\"\r\n                value={repeatPassword}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={signUpRequest}\r\n          >\r\n            {\"Sign Up\"}\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link \r\n                variant=\"body2\" \r\n                onClick={(): void => setPage(PagesEnum.SIGNIN)} \r\n                style={{cursor: \"pointer\"}}\r\n              >\r\n                {\"Already have an account? Sign in\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React, { useState } from 'react'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Button from '@material-ui/core/Button'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Container from '@material-ui/core/Container'\r\nimport Link from '@material-ui/core/Link'\r\nimport { PagesEnum } from '../enums/pages.enum'\r\nimport Cookies from 'js-cookie'\r\nimport { url } from '../config/index'\r\nimport { signStyles } from '../styles/styles'\r\nimport { pageProps } from '../types/api'\r\n\r\nexport default function SignIn({setPage}: pageProps) {\r\n  const classes = signStyles();\r\n\r\n  const [login, setLogin] = useState<string>(\"\")\r\n  const [password, setPassword] = useState<string>(\"\")\r\n\r\n  const signUpRequest = (): void => {\r\n    const uri = `${url}signin?login=${login}&password=${password}`\r\n    fetch(uri, {\r\n      method: 'POST',\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        json.access_token && Cookies.set(\"token\", json.access_token)\r\n        json.access_token && setPage(PagesEnum.CHAT)\r\n        Cookies.set(\"userLogin\", login)\r\n      })\r\n  } \r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value, name } = event.target\r\n    name === \"login\" && setLogin(value)\r\n    name === \"password\" && setPassword(value)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {\"Sign in\"}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"login\"\r\n                value={login}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={signUpRequest}\r\n          >\r\n            {\"Sign In\"}\r\n          </Button>\r\n          <Grid item>\r\n              <Link\r\n                variant=\"body2\" \r\n                onClick={(): void => setPage(PagesEnum.SIGNUP)} \r\n                style={{cursor: \"pointer\"}}\r\n              >\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React, { useEffect, useState, ReactElement } from 'react'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Button from '@material-ui/core/Button'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Container from '@material-ui/core/Container'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { format } from 'date-fns'\r\nimport ru from 'date-fns/locale/ru'\r\nimport parseISO from 'date-fns/parseISO'\r\n\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\nimport Cookies from 'js-cookie'\r\nimport { PagesEnum } from '../enums/pages.enum'\r\nimport { Box } from '@material-ui/core'\r\nimport { url } from '../config/index'\r\nimport { chatStyles } from '../styles/styles'\r\nimport { pageProps, messageProps } from '../types/api'\r\n\r\nconst socket = socketIOClient(url);\r\nsocket.disconnect()\r\n\r\nexport default function Chat({setPage}: pageProps) {\r\n  const classes = chatStyles();\r\n\r\n  socket.connect()\r\n\r\n  const [massage, setMessage] = useState<string>('')\r\n  const [messagesList, setMessagesList] = useState<messageProps[]>([])\r\n  const userLogin = Cookies.get(\"userLogin\")\r\n\r\n  const handleOut = (): void => {\r\n    Cookies.set(\"token\", \"\")\r\n    Cookies.set(\"userLogin\", \"\")\r\n    setPage(PagesEnum.SIGNIN)\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const { value, name } = event.target\r\n    name === \"message\" && setMessage(value)\r\n  }\r\n\r\n  const sendMessage = (): void => {\r\n    socket.emit('events', JSON.stringify({ \r\n      command: \"createMessage\", \r\n      data: {\r\n        text: massage,\r\n      }\r\n    }))\r\n    setMessage(\"\")\r\n  }\r\n\r\n  useEffect((): (() => void) => {\r\n    socket.emit('messages', \r\n      JSON.stringify({ command: \"getAllMessages\" }), \r\n      (data: any) => {\r\n        setMessagesList(data)\r\n      }\r\n    );\r\n    socket.on(\"messages\", (data: any) => {\r\n      setMessagesList(data)\r\n    })\r\n\r\n    return (): void => {socket.disconnect()};\r\n  }, []);\r\n\r\n  const MessageBox = ({login, text, createdAt}: messageProps): ReactElement => {\r\n    const date = format(parseISO(createdAt), \"Pp\", {\r\n      locale: ru,\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <Box className={classes.messageInfo}>\r\n          {`${date}, ${login}: `}\r\n        </Box>\r\n        <Box className={classes.message}>\r\n          {text}\r\n        </Box>\r\n      </>\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <Container\r\n      component=\"main\" \r\n      maxWidth=\"sm\"\r\n    >\r\n      <Button \r\n        variant=\"outlined\" \r\n        size=\"small\"\r\n        className={classes.buttonOut}\r\n        onClick={handleOut}\r\n        >\r\n          {\"Out\"}\r\n      </Button>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Box className={classes.userLogin}>\r\n          {userLogin}\r\n        </Box>\r\n        <Avatar className={classes.avatar}>\r\n          <ChatIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {\"Bla-bla-chat\"}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Box\r\n                height=\"500px\"\r\n                component=\"div\" \r\n                border=\"1px solid\"\r\n                borderRadius=\"4px\"\r\n                borderColor=\"rgba(0, 0, 0, 0.23)\"\r\n                padding=\"10px\"\r\n                className={classes.messageBox}\r\n              >\r\n                {messagesList.map((item: any): ReactElement => \r\n                  <MessageBox \r\n                    key={item.id} \r\n                    login={item.login} \r\n                    text={item.text} \r\n                    createdAt={item.createdAt} \r\n                  />)}\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"message\"\r\n                label=\"Message\"\r\n                type=\"message\"\r\n                id=\"message\"\r\n                multiline\r\n                value={massage}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={sendMessage}\r\n          >\r\n            {\"Send\"}\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport SignUp from './signup/signup'\nimport SignIn from './signin/signin'\nimport Chat from './chat/chat'\nimport Cookies from 'js-cookie'\nimport { PagesEnum } from './enums/pages.enum'\n\nfunction App() {\n  const [page, setPage] = useState<string>(PagesEnum.SIGNIN)\n  \n  useEffect((): void => {\n    const token = Cookies.get('token')\n    token && setPage(PagesEnum.CHAT)\n  }, [])\n\n  return (\n    <>\n      {page === PagesEnum.SIGNUP && <SignUp setPage={setPage} />}\n      {page === PagesEnum.SIGNIN && <SignIn setPage={setPage} />}\n      {page === PagesEnum.CHAT && <Chat setPage={setPage} />}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}